"""A connection to a list of `Company` values."""
type CompaniesConnection {
  """A list of `Company` objects."""
  nodes: [Company]!

  """
  A list of edges which contains the `Company` and cursor to aid in pagination.
  """
  edges: [CompaniesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Company` you could get from the connection."""
  totalCount: Int
}

"""A `Company` edge in the connection."""
type CompaniesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Company` at the end of the edge."""
  node: Company
}

"""Methods to use when ordering `Company`."""
enum CompaniesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Company implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
}

"""
A condition to be used against `Company` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CompanyCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Company`"""
input CompanyInput {
  id: Int
  name: String!
}

"""
Represents an update to a `Company`. Fields that are set will be updated.
"""
input CompanyPatch {
  id: Int
  name: String
}

"""All input for the create `Company` mutation."""
input CreateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Company` to be created by this mutation."""
  company: CompanyInput!
}

"""The output of our create `Company` mutation."""
type CreateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was created by this mutation."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = PRIMARY_KEY_ASC
  ): CompaniesEdge
}

"""All input for the create `Fish` mutation."""
input CreateFishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Fish` to be created by this mutation."""
  fish: FishInput!
}

"""The output of our create `Fish` mutation."""
type CreateFishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fish` that was created by this mutation."""
  fish: Fish

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Fish`. May be used by Relay 1."""
  fishEdge(
    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!] = PRIMARY_KEY_ASC
  ): FishEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteCompanyById` mutation."""
input DeleteCompanyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCompany` mutation."""
input DeleteCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Company` mutation."""
type DeleteCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was deleted by this mutation."""
  company: Company
  deletedCompanyId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = PRIMARY_KEY_ASC
  ): CompaniesEdge
}

"""All input for the `deleteFishById` mutation."""
input DeleteFishByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFish` mutation."""
input DeleteFishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fish` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Fish` mutation."""
type DeleteFishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fish` that was deleted by this mutation."""
  fish: Fish
  deletedFishId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Fish`. May be used by Relay 1."""
  fishEdge(
    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!] = PRIMARY_KEY_ASC
  ): FishEdge
}

type Fish implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
}

"""
A condition to be used against `Fish` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FishCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""A connection to a list of `Fish` values."""
type FishConnection {
  """A list of `Fish` objects."""
  nodes: [Fish]!

  """
  A list of edges which contains the `Fish` and cursor to aid in pagination.
  """
  edges: [FishEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fish` you could get from the connection."""
  totalCount: Int
}

"""A `Fish` edge in the connection."""
type FishEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Fish` at the end of the edge."""
  node: Fish
}

"""An input for mutations affecting `Fish`"""
input FishInput {
  id: Int
  name: String!
}

"""Methods to use when ordering `Fish`."""
enum FishOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Fish`. Fields that are set will be updated.
"""
input FishPatch {
  id: Int
  name: String
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Company`."""
  createCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCompanyInput!
  ): CreateCompanyPayload

  """Creates a single `Fish`."""
  createFish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFishInput!
  ): CreateFishPayload

  """Updates a single `Company` using its globally unique id and a patch."""
  updateCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyInput!
  ): UpdateCompanyPayload

  """Updates a single `Company` using a unique key and a patch."""
  updateCompanyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCompanyByIdInput!
  ): UpdateCompanyPayload

  """Updates a single `Fish` using its globally unique id and a patch."""
  updateFish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFishInput!
  ): UpdateFishPayload

  """Updates a single `Fish` using a unique key and a patch."""
  updateFishById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFishByIdInput!
  ): UpdateFishPayload

  """Deletes a single `Company` using its globally unique id."""
  deleteCompany(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyInput!
  ): DeleteCompanyPayload

  """Deletes a single `Company` using a unique key."""
  deleteCompanyById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCompanyByIdInput!
  ): DeleteCompanyPayload

  """Deletes a single `Fish` using its globally unique id."""
  deleteFish(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFishInput!
  ): DeleteFishPayload

  """Deletes a single `Fish` using a unique key."""
  deleteFishById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFishByIdInput!
  ): DeleteFishPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Company`."""
  allCompanies(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CompanyCondition
  ): CompaniesConnection

  """Reads and enables pagination through a set of `Fish`."""
  allFish(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FishCondition
  ): FishConnection
  companyById(id: Int!): Company
  fishById(id: Int!): Fish

  """Reads a single `Company` using its globally unique `ID`."""
  company(
    """The globally unique `ID` to be used in selecting a single `Company`."""
    nodeId: ID!
  ): Company

  """Reads a single `Fish` using its globally unique `ID`."""
  fish(
    """The globally unique `ID` to be used in selecting a single `Fish`."""
    nodeId: ID!
  ): Fish
}

"""All input for the `updateCompanyById` mutation."""
input UpdateCompanyByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  companyPatch: CompanyPatch!
  id: Int!
}

"""All input for the `updateCompany` mutation."""
input UpdateCompanyInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Company` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Company` being updated.
  """
  companyPatch: CompanyPatch!
}

"""The output of our update `Company` mutation."""
type UpdateCompanyPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Company` that was updated by this mutation."""
  company: Company

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Company`. May be used by Relay 1."""
  companyEdge(
    """The method to use when ordering `Company`."""
    orderBy: [CompaniesOrderBy!] = PRIMARY_KEY_ASC
  ): CompaniesEdge
}

"""All input for the `updateFishById` mutation."""
input UpdateFishByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fish` being updated.
  """
  fishPatch: FishPatch!
  id: Int!
}

"""All input for the `updateFish` mutation."""
input UpdateFishInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fish` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Fish` being updated.
  """
  fishPatch: FishPatch!
}

"""The output of our update `Fish` mutation."""
type UpdateFishPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fish` that was updated by this mutation."""
  fish: Fish

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Fish`. May be used by Relay 1."""
  fishEdge(
    """The method to use when ordering `Fish`."""
    orderBy: [FishOrderBy!] = PRIMARY_KEY_ASC
  ): FishEdge
}
